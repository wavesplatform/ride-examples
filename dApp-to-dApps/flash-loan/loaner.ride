# This is an example of a loaner contract for flash loan scenario.
#
# Should be called from the account related to the borrower.
#
# Calls the contract specified by the borrower when called in the transaction
# and applies the requested amount of token A in the call.
# Checks that upon completion of the call to the contract, the balance of token A has increased.

{-# STDLIB_VERSION 5     #-}
{-# SCRIPT_TYPE ACCOUNT  #-}
{-# CONTENT_TYPE DAPP    #-}

let assetA = base58''
let loanFeePercent = 5

@Callable(i)
func loan(amount: Int, callback: String, borrower: ByteVector) = {
  strict startBalance = this.assetBalance(assetA)
  strict r = invoke(Address(borrower), callback, [i.caller.bytes], [AttachedPayment(assetA, amount)])

  let balanceDiff = this.assetBalance(assetA) - startBalance
  let profit      = amount.fraction(loanFeePercent, 100)

  if (balanceDiff < profit)
    then
      throw("debt is not paid: diff=" + balanceDiff.toString() + ", expected=" + profit.toString())
    else
      []
}
