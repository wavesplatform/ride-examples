# 'FLASH LOAN' scenario.
#
# Borrower contract.
#
# Borrows token A, changes to B, then changes the funds received again to A,
# returns the money to the lender and stays in profit on token A.

{-# STDLIB_VERSION 5     #-}
{-# SCRIPT_TYPE ACCOUNT  #-}
{-# CONTENT_TYPE DAPP    #-}

let loanFeePercent = 5
let assetA = base58''
let assetB = base58''
let exchangerABAddress = Address(base58'')
let exchangerBAAddress = Address(base58'')
let loanerAddress      = Address(base58'')

@Callable(i)
func trade(beneficiary: ByteVector) = {
  let loanAmount =
    if (i.payments[0].assetId == assetA)
      then i.payments[0].amount
      else throw("unexpected payment asset")

  strict startBalanceB = this.assetBalance(assetB)
  strict r1 = invoke(exchangerABAddress, "exchangeAB", [], [AttachedPayment(assetA, loanAmount)])
  strict diffB = this.assetBalance(assetB) - startBalanceB

  strict r2 = invoke(exchangerBAAddress, "exchangeBA", [], [AttachedPayment(assetB, diffB)])

  let debt = loanAmount.fraction(100 + loanFeePercent, 100)
  let profit = this.assetBalance(assetA) - debt
  [
    ScriptTransfer(Address(beneficiary), profit, assetA),
    ScriptTransfer(loanerAddress, debt, assetA)
  ]
}
